{"ast":null,"code":"// Parses an Excel Date (\"serial\") into a\n// corresponding javascript Date in UTC+0 timezone.\n// (with time equal to 00:00)\n//\n// Doesn't account for leap seconds.\n// Therefore is not 100% correct.\n// But will do, I guess, since we're\n// not doing rocket science here.\n//\n// https://www.pcworld.com/article/3063622/software/mastering-excel-date-time-serial-numbers-networkdays-datevalue-and-more.html\n// \"If you need to calculate dates in your spreadsheets,\n//  Excel uses its own unique system, which it calls Serial Numbers\".\n//\nexport default function parseExcelDate(excelSerialDate, options) {\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\n  if (options && options.epoch1904) {\n    excelSerialDate += 1462;\n  } // \"Excel serial date\" is just\n  // the count of days since `01/01/1900`\n  // (seems that it may be even fractional).\n  //\n  // The count of days elapsed\n  // since `01/01/1900` (Excel epoch)\n  // till `01/01/1970` (Unix epoch).\n  // Accounts for leap years\n  // (19 of them, yielding 19 extra days).\n\n\n  var daysBeforeUnixEpoch = 70 * 365 + 19; // An hour, approximately, because a minute\n  // may be longer than 60 seconds, see \"leap seconds\".\n\n  var hour = 60 * 60 * 1000;\n  return new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour));\n}","map":{"version":3,"sources":["../../source/read/parseDate.js"],"names":["options","excelSerialDate","daysBeforeUnixEpoch","hour","Math"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAA,cAAA,CAAA,eAAA,EAAA,OAAA,EAAkD;AAC/D;AACA,MAAIA,OAAO,IAAIA,OAAO,CAAtB,SAAA,EAAkC;AAChCC,IAAAA,eAAe,IAAfA,IAAAA;AAH6D,GAAA,CAM/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,mBAAmB,GAAG,KAAA,GAAA,GAfmC,EAe/D,CAf+D,CAiB/D;AACA;;AACA,MAAMC,IAAI,GAAG,KAAA,EAAA,GAAb,IAAA;AAEA,SAAO,IAAA,IAAA,CAASC,IAAI,CAAJA,KAAAA,CAAW,CAACH,eAAe,GAAhB,mBAAA,IAAA,EAAA,GAA3B,IAAgBG,CAAT,CAAP;AACD","sourcesContent":["// Parses an Excel Date (\"serial\") into a\r\n// corresponding javascript Date in UTC+0 timezone.\r\n// (with time equal to 00:00)\r\n//\r\n// Doesn't account for leap seconds.\r\n// Therefore is not 100% correct.\r\n// But will do, I guess, since we're\r\n// not doing rocket science here.\r\n//\r\n// https://www.pcworld.com/article/3063622/software/mastering-excel-date-time-serial-numbers-networkdays-datevalue-and-more.html\r\n// \"If you need to calculate dates in your spreadsheets,\r\n//  Excel uses its own unique system, which it calls Serial Numbers\".\r\n//\r\nexport default function parseExcelDate(excelSerialDate, options) {\r\n  // https://support.microsoft.com/en-gb/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel\r\n  if (options && options.epoch1904) {\r\n    excelSerialDate += 1462\r\n  }\r\n\r\n  // \"Excel serial date\" is just\r\n  // the count of days since `01/01/1900`\r\n  // (seems that it may be even fractional).\r\n  //\r\n  // The count of days elapsed\r\n  // since `01/01/1900` (Excel epoch)\r\n  // till `01/01/1970` (Unix epoch).\r\n  // Accounts for leap years\r\n  // (19 of them, yielding 19 extra days).\r\n  const daysBeforeUnixEpoch = 70 * 365 + 19\r\n\r\n  // An hour, approximately, because a minute\r\n  // may be longer than 60 seconds, see \"leap seconds\".\r\n  const hour = 60 * 60 * 1000\r\n\r\n  return new Date(Math.round((excelSerialDate - daysBeforeUnixEpoch) * 24 * hour))\r\n}"]},"metadata":{},"sourceType":"module"}