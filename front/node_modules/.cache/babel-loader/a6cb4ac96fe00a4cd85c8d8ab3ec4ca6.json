{"ast":null,"code":"var _excluded = [\"schema\", \"map\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport readXlsx from './readXlsx';\nimport convertToJson from './schema/convertToJson';\nimport convertMapToSchema from './schema/convertMapToSchema';\nexport default function readXlsxFileContents(entries, xml, _ref) {\n  var schema = _ref.schema,\n      map = _ref.map,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  if (!schema && map) {\n    schema = convertMapToSchema(map);\n  }\n\n  var result = readXlsx(entries, xml, _objectSpread(_objectSpread({}, options), {}, {\n    properties: schema || options.properties\n  }));\n\n  if (schema) {\n    return convertToJson(result.data, schema, _objectSpread(_objectSpread({}, options), {}, {\n      properties: result.properties\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../source/read/readXlsxFileContents.js"],"names":["schema","map","options","convertMapToSchema","result","readXlsx","properties","convertToJson"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,QAAA,MAAA,YAAA;AAEA,OAAA,aAAA,MAAA,wBAAA;AACA,OAAA,kBAAA,MAAA,6BAAA;AAEA,eAAe,SAAA,oBAAA,CAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAwE;AAAA,MAA1BA,MAA0B,GAAA,IAAA,CAA1BA,MAA0B;AAAA,MAAlBC,GAAkB,GAAA,IAAA,CAAlBA,GAAkB;AAAA,MAAVC,OAAU,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACtF,MAAI,CAAA,MAAA,IAAJ,GAAA,EAAoB;AACnBF,IAAAA,MAAM,GAAGG,kBAAkB,CAA3BH,GAA2B,CAA3BA;AACA;;AACD,MAAMI,MAAM,GAAGC,QAAQ,CAAA,OAAA,EAAA,GAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAA6BC,IAAAA,UAAU,EAAEN,MAAM,IAAIE,OAAO,CAACI;AAA3D,GAAA,CAAA,CAAvB;;AACA,MAAA,MAAA,EAAY;AACX,WAAOC,aAAa,CAACH,MAAM,CAAP,IAAA,EAAA,MAAA,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAAoCE,MAAAA,UAAU,EAAEF,MAAM,CAACE;AAAvD,KAAA,CAAA,CAApB;AACA;;AACD,SAAA,MAAA;AACA","sourcesContent":["import readXlsx from './readXlsx'\r\n\r\nimport convertToJson from './schema/convertToJson'\r\nimport convertMapToSchema from './schema/convertMapToSchema'\r\n\r\nexport default function readXlsxFileContents(entries, xml, { schema, map, ...options}) {\r\n\tif (!schema && map) {\r\n\t\tschema = convertMapToSchema(map)\r\n\t}\r\n\tconst result = readXlsx(entries, xml, { ...options, properties: schema || options.properties })\r\n\tif (schema) {\r\n\t\treturn convertToJson(result.data, schema, { ...options, properties: result.properties })\r\n\t}\r\n\treturn result\r\n}"]},"metadata":{},"sourceType":"module"}